import groovy.swing.SwingBuilder;
//Password prompts from https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.famsf.roundware"
        minSdkVersion 9
        targetSdkVersion 21
        versionCode 3
        versionName "1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file("famsf.jks")
            keyAlias "FamsfReleaseKey"
            storePassword ""
            keyPassword ""
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // ensure only prompt for release
            gradle.taskGraph.whenReady { taskGraph ->
                taskGraph.getAllTasks().each() { task ->
                    println task.name
                    if (task.name.endsWith('packageRelease')) {
                        android.signingConfigs.release.storePassword = promptPass("\nPlease enter Keystore password: ").toString()
                        android.signingConfigs.release.keyPassword = promptPass("\nPlease enter Key password: ").toString()
                    }
                }
            }
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile project(':rwapp')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
        transitive = true;
    }
}

//Prompt user for password
def promptPass(String prompt) {
    def pass = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                    title: 'Enter password', // Dialog title
                    alwaysOnTop: true, // pretty much what the name says
                    resizable: false, // Don't allow the user to resize the dialog
                    locationRelativeTo: null, // Place dialog in center of the screen
                    pack: true, // We need to pack the dialog (so it will take the size of it's children)
                    show: true // Let's show it
            ) {
                vbox { // Put everything below each other
                    label(text: prompt)
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        pass = input.password; // Set pass variable to value of input field
                        dispose(); // Close dialog
                    })
                } // vbox end
            } // dialog end
        } // edt end
    } else {
        pass = System.console().readPassword(prompt)
        pass = new String(pass)
    }

    if (pass.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }
    return pass;
}